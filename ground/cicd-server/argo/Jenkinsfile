pipeline {
    agent any

    parameters {
        choice(choices: ['option', 'namespace_create', 'namespace_delete', 'helm_upgrade', 'helm_uninstall'], name: 'DEPLOY_TYPE', description: '배포 타입 선택')
        choice(choices: ['option', 'argocd', 'argocd-image-updater', 'argo-rollouts'], name: 'TARGET_ARGO', description: 'Argo 대상 선택')
    }

    environment {
        DOCKERHUB_USERNAME = '1pro'
        GITHUB_URL = 'https://github.com/k8s-1pro/install.git'
        INSTALL_PATH = 'ground/cicd-server/argo'
    }

    stages {
        stage('릴리즈파일 체크아웃') {
            steps {
                checkout scmGit(branches: [[name: '*/main']],
                        extensions: [[$class: 'SparseCheckoutPaths',
                                      sparseCheckoutPaths: [[path: "/${INSTALL_PATH}"]]]],
                        userRemoteConfigs: [[url: "${GITHUB_URL}"]])
            }
        }

        stage('네임스페이스 관리') {
            steps {
                script{
                    if (params.DEPLOY_TYPE == "namespace_create") {
                        withCredentials([file(credentialsId: 'k8s_master_config', variable: 'KUBECONFIG')]) {
                            sh "kubectl apply -f ./${INSTALL_PATH}/kubectl/namespace.yaml --kubeconfig " + '${KUBECONFIG}'
                        }
                    } else if (params.DEPLOY_TYPE == "namespace_delete") {
                        withCredentials([file(credentialsId: 'k8s_master_config', variable: 'KUBECONFIG')]) {
                            sh "kubectl delete -f ./${INSTALL_PATH}/kubectl/namespace.yaml --kubeconfig " + '${KUBECONFIG}'
                        }
                    } else {
                        echo "skip namespace"
                    }
                }
            }
        }

        stage('헬름 배포 관리') {
            steps {
                script{
                    if (params.DEPLOY_TYPE == "helm_upgrade") {
                        withCredentials([file(credentialsId: 'k8s_master_config', variable: 'KUBECONFIG')]) {
                            sh "helm upgrade ${TARGET_ARGO} ./${INSTALL_PATH}/helm/${TARGET_ARGO} " +
                                    " -f ./${INSTALL_PATH}/helm/${TARGET_ARGO}/values-custom.yaml" +
                                    " -n argocd --install --kubeconfig " + '${KUBECONFIG}' +
                                    " --wait --timeout=10m"   // 최대 10분으로 설정
                        }
                    } else if (params.DEPLOY_TYPE == "helm_uninstall") {
                        withCredentials([file(credentialsId: 'k8s_master_config', variable: 'KUBECONFIG')]) {
                            sh "helm uninstall ${TARGET_ARGO} -n argocd --kubeconfig " + '${KUBECONFIG}'

                            // CRD 삭제
                            sh "kubectl delete crd  applications.argoproj.io applicationsets.argoproj.io appprojects.argoproj.io --kubeconfig " + '${KUBECONFIG}'
                        }
                    } else {
                        echo "skip deploy"
                    }
                }
            }
        }
    }
}